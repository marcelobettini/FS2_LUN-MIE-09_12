//Promises (Promesas, asincronismo en JS)

const data = require("./helpers/data")

//en el mundo idea, voy a buscar los datos y el programa "se queda esperando" el resultado
// const getData = () => {
//     return data
// }

// console.log(getData())

//pero en JS eso no existe, porque el procedimiento de b√∫squeda de datos, al ser asincr√≥nico, va a demorar x tiempo en devolver el resultado, entonces, cuando muestre el resultado, seguramente a√∫n no lo tendr√© disponible y eso dar√° como resultado undefined o un arreglo vac√≠o, si es que as√≠ inicialic√© el arreglo que recibir√° los datos

// const getData = () => {
//     setTimeout(() => {
//         return data
//     }, 2000)
// }
// console.log(getData())

/*Promise va a retornar el resultado de la operaci√≥n, puede ser resolve o reject, pero s√≥lo cuando haya terminado el ciclo. El estado de una promesa
pasa por etapas: pending... y luego puede ser fulfilled, rejected... Nunca me retornar√° undefined */

const getData = () => {
    return new Promise((resolve, reject) => {
        const err = true
        setTimeout(() => {
            if (err) {
                reject("Sali√≥ todo mal üò´")
            } else {
                resolve(data)
            }
        }, 3000)
    })
}


getData()
    .then((res) => console.log(res))
    .catch((err) => console.log(err));

console.log("Esto est√° despu√©s de la ejecuci√≥n de getData, pero se ver√° antes... cool")
console.log("Esto est√° despu√©s de la ejecuci√≥n de getData, pero se ver√° antes... cool")
console.log("Esto est√° despu√©s de la ejecuci√≥n de getData, pero se ver√° antes... cool")
console.log("Esto est√° despu√©s de la ejecuci√≥n de getData, pero se ver√° antes... cool")
console.log("Esto est√° despu√©s de la ejecuci√≥n de getData, pero se ver√° antes... cool")